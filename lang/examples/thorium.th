type A : m() -> A
type A : m() -> A, m() -> A
type A : m(A) -> A
type A : m(A, A) -> A
type A extends A : m() -> A
type A extends A, A : m() -> A
type A extends A, A : m(A, A) -> A, m(A, A) -> A
type A<A, A> extends A, A<A, A> : m(A) -> A, m(A<A, A>) -> A<A, A>
type A alias B<B>
define A : A {}
define A<A, A> : A<A, A> {}
define A : A (A a) {}
define A : A { m() -> {} }
define A : A { m(A a) -> ... }
define A : A { m(A a) -> ... m(A a) -> {} }
type A alias A -> A
type A alias () -> A
type A alias (A, A) -> A
define Predicate<T> : T -> Boolean {}